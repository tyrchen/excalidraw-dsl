---
layout: elk
theme: light
node_spacing: 150
edge_spacing: 100
---

# Event-Driven E-commerce Platform - Simplified
# Core event sourcing and CQRS pattern with saga orchestration

# Command Side (Write Model)
container "Command Side" as command_side {
  style: {
    backgroundColor: "#f0f9ff";
    strokeColor: "#0ea5e9";
    strokeWidth: 2;
  }

  api_gateway[API Gateway] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
    fontSize: 16;
  }

  command_handlers[Command Handlers] {
    backgroundColor: "#7dd3fc";
    strokeColor: "#0284c7";
    fontSize: 14;
  }

  # Simplified internal routing
  api_gateway -> command_handlers: "Commands";
}

# Event Store
container "Event Store" as event_store {
  style: {
    backgroundColor: "#fef3c7";
    strokeColor: "#f59e0b";
    strokeWidth: 2;
  }

  event_db[Event Database] {
    shape: cylinder;
    backgroundColor: "#fbbf24";
    strokeColor: "#f59e0b";
    fontSize: 16;
  }

  event_publisher[Event Publisher] {
    backgroundColor: "#fed7aa";
    strokeColor: "#f59e0b";
    fontSize: 14;
  }

  event_db -> event_publisher: "Publish";
}

# Query Side (Read Model)
container "Query Side" as query_side {
  style: {
    backgroundColor: "#f0fdf4";
    strokeColor: "#16a34a";
    strokeWidth: 2;
  }

  projections[Event Projections] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
    fontSize: 14;
  }

  query_api[Query API] {
    backgroundColor: "#16a34a";
    strokeColor: "#15803d";
    fontSize: 16;
  }

  projections -> query_api: "Views";
}

# Read Model Storage
container "Read Storage" as read_storage {
  style: {
    backgroundColor: "#fef3e2";
    strokeColor: "#ea580c";
    strokeWidth: 2;
  }

  view_databases[View Databases] {
    shape: cylinder;
    backgroundColor: "#fed7aa";
    strokeColor: "#ea580c";
    fontSize: 14;
  }
}

# Saga Orchestration
container "Saga Orchestration" as saga_orchestrator {
  style: {
    backgroundColor: "#f3e8ff";
    strokeColor: "#7c3aed";
    strokeWidth: 2;
  }

  order_saga[Order Saga] {
    backgroundColor: "#c4b5fd";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }

  payment_saga[Payment Saga] {
    backgroundColor: "#c4b5fd";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }
}

# External Services
container "External Services" as external_services {
  style: {
    backgroundColor: "#f8fafc";
    strokeColor: "#64748b";
    strokeWidth: 2;
    strokeStyle: dashed;
  }

  payment_gateway[Payment Gateway] {
    backgroundColor: "#e2e8f0";
    strokeColor: "#64748b";
    fontSize: 14;
  }

  shipping_service[Shipping Service] {
    backgroundColor: "#e2e8f0";
    strokeColor: "#64748b";
    fontSize: 14;
  }
}

# Event Bus (Central)
event_bus[Event Bus (Kafka)] {
  backgroundColor: "#a855f7";
  strokeColor: "#7c3aed";
  fontSize: 16;
  shape: ellipse;
}

# Client Entry Point
clients[Client Applications] {
  backgroundColor: "#1e293b";
  strokeColor: "#0f172a";
  fontSize: 16;
  color: "#ffffff";
}

# === CONTAINER TO CONTAINER CONNECTIONS ===

# Client interactions
clients -> command_side: "Commands" {
  routing: orthogonal;
};

clients -> query_side: "Queries" {
  routing: orthogonal;
};

# Command flow
command_side -> event_store: "Store Events" {
  routing: orthogonal;
};

# Event distribution
event_store -> event_bus: "Publish Events" {
  routing: orthogonal;
};

# Query side update
event_bus -> query_side: "Event Stream" {
  routing: orthogonal;
};

query_side -> read_storage: "Update Views" {
  routing: orthogonal;
};

# Saga orchestration
event_bus -> saga_orchestrator: "Business Events" {
  routing: orthogonal;
};

saga_orchestrator -> external_services: "External Calls" {
  routing: orthogonal;
};

# Saga feedback
saga_orchestrator -> command_side: "Compensations" {
  routing: orthogonal;
};

saga_orchestrator -> event_bus: "Saga Events" {
  routing: orthogonal;
};
