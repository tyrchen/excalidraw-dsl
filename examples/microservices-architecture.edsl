---
layout: elk
direction: TB
theme: light
node_spacing: 150
edge_spacing: 100
---

# Microservices Architecture - Simplified
# Essential microservices patterns with clean container-to-container connections

# Frontend Layer
container "Frontend" as frontend {
  style: {
    backgroundColor: "#e0f2fe";
    strokeStyle: dashed;
  }

  web_app[Web Application] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
  }

  mobile_app[Mobile App] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
  }
}

# API Gateway
api_gateway[API Gateway] {
  shape: diamond;
  backgroundColor: "#fbbf24";
  strokeColor: "#f59e0b";
  fontSize: 18;
}

# Service Mesh
container "Service Mesh" as services {
  style: {
    backgroundColor: "#f0fdf4";
    strokeStyle: dashed;
    strokeColor: "#16a34a";
  }

  auth_service[Auth Service] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
  }

  business_services[Business Services] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
  }

  notification_service[Notification Service] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
  }

  # Simplified internal flow
  auth_service -> business_services: "Authorize";
  business_services -> notification_service: "Events";
}

# Data Layer
container "Data Layer" as data {
  style: {
    backgroundColor: "#fef3c7";
    strokeStyle: solid;
    strokeWidth: 2;
  }

  databases[Service Databases] {
    shape: cylinder;
    backgroundColor: "#fde047";
    strokeColor: "#facc15";
  }

  cache[Redis Cache] {
    shape: ellipse;
    backgroundColor: "#ef4444";
    strokeColor: "#dc2626";
  }
}

# Message Queue
message_queue[Message Queue] {
  shape: ellipse;
  backgroundColor: "#8b5cf6";
  strokeColor: "#7c3aed";
  fontSize: 16;
}

# External Services
container "External Services" as external {
  style: {
    backgroundColor: "#fee2e2";
    strokeStyle: dotted;
  }

  external_apis[External APIs] {
    backgroundColor: "#fca5a5";
    strokeColor: "#f87171";
  }
}

# === CONTAINER TO CONTAINER CONNECTIONS ===

# Frontend to Gateway
frontend -> api_gateway: "API Requests" {
  routing: orthogonal;
};

# Gateway to Services
api_gateway -> services: "Route Requests" {
  routing: orthogonal;
};

# Services to Data
services -> data: "Data Operations" {
  routing: orthogonal;
};

# Services to Queue
services -> message_queue: "Async Events" {
  routing: orthogonal;
};

# Queue to Services (Subscription)
message_queue -> services: "Event Processing" {
  routing: orthogonal;
};

# Services to External
services -> external: "External Calls" {
  routing: orthogonal;
};
