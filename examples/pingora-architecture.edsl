---
layout: elk
direction: LR
node_spacing: 150
edge_spacing: 100
theme: light
---

# Pingora Architecture - Simplified
# High-performance proxy architecture with essential components

# Client Side
container "Client Side" as client_side {
  style: {
    backgroundColor: "#e0f2fe";
    strokeColor: "#0284c7";
    strokeStyle: solid;
  }

  client_app[Client Applications] {
    backgroundColor: "#dbeafe";
    strokeColor: "#3b82f6";
  }
}

# Proxy Layer
container "Pingora Proxy" as proxy_layer {
  style: {
    backgroundColor: "#dcfce7";
    strokeColor: "#16a34a";
    strokeWidth: 2;
  }

  ingress[Ingress Gateway] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
  }

  middleware[Middleware Stack] {
    backgroundColor: "#e5e7eb";
    strokeColor: "#6b7280";
  }

  plugins[Protocol Plugins] {
    backgroundColor: "#bfdbfe";
    strokeColor: "#3b82f6";
  }

  # Internal flow
  ingress -> middleware: "Process";
  middleware -> plugins: "Route";
}

# Backend Services
container "Backend Services" as backend_services {
  style: {
    backgroundColor: "#f3f4f6";
    strokeColor: "#374151";
  }

  api_servers[API Servers] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
  }

  grpc_servers[gRPC Servers] {
    backgroundColor: "#bfdbfe";
    strokeColor: "#3b82f6";
  }
}

# === CONTAINER TO CONTAINER CONNECTIONS ===

# Client to Proxy
client_side -> proxy_layer: "HTTPS/H2" {
  routing: orthogonal;
};

# Proxy to Backend
proxy_layer -> backend_services: "Load Balanced" {
  routing: orthogonal;
};
