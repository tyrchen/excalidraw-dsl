---
layout: elk
direction: TB
theme: light
node_spacing: 150
edge_spacing: 100
---

# Distributed Data Platform Architecture - Simplified
# Shows essential data flow between major platform components

# Data Sources
container "Data Sources" as data_sources {
  style: {
    backgroundColor: "#f0f9ff";
    strokeColor: "#0ea5e9";
    strokeWidth: 2;
  }

  web_events[Web Analytics] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
    fontSize: 14;
  }

  mobile_events[Mobile Events] {
    backgroundColor: "#7dd3fc";
    strokeColor: "#0284c7";
    fontSize: 14;
  }

  transaction_db[Transaction Database] {
    backgroundColor: "#7dd3fc";
    strokeColor: "#0284c7";
    fontSize: 14;
    shape: cylinder;
  }

  crm_system[CRM System] {
    backgroundColor: "#7dd3fc";
    strokeColor: "#0284c7";
    fontSize: 14;
  }

  iot_sensors[IoT Sensors] {
    backgroundColor: "#7dd3fc";
    strokeColor: "#0284c7";
    fontSize: 14;
  }
}

# Data Ingestion Layer
container "Data Ingestion" as data_ingestion {
  style: {
    backgroundColor: "#fef3c7";
    strokeColor: "#f59e0b";
    strokeWidth: 2;
  }

  kafka[Apache Kafka] {
    backgroundColor: "#fbbf24";
    strokeColor: "#f59e0b";
    fontSize: 16;
    shape: ellipse;
  }

  kafka_connect[Kafka Connect] {
    backgroundColor: "#fed7aa";
    strokeColor: "#f59e0b";
    fontSize: 14;
  }

  airbyte[Airbyte] {
    backgroundColor: "#fed7aa";
    strokeColor: "#f59e0b";
    fontSize: 14;
  }

  debezium[Debezium CDC] {
    backgroundColor: "#fed7aa";
    strokeColor: "#f59e0b";
    fontSize: 14;
  }

  # Simplified internal connections
  kafka_connect -> kafka: "Stream";
  airbyte -> kafka: "Batch";
  debezium -> kafka: "CDC";
}

# Stream Processing
container "Real-time Processing" as stream_processing {
  style: {
    backgroundColor: "#f0fdf4";
    strokeColor: "#16a34a";
    strokeWidth: 2;
  }

  kafka_streams[Kafka Streams] {
    backgroundColor: "#16a34a";
    strokeColor: "#15803d";
    fontSize: 16;
    color: "#ffffff";
  }

  flink[Apache Flink] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
    fontSize: 14;
  }

  real_time_ml[Real-time ML] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  # Simplified internal flow
  kafka_streams -> real_time_ml: "Features";
}

# Data Lake (Raw Storage)
container "Data Lake" as data_lake {
  style: {
    backgroundColor: "#fef3e2";
    strokeColor: "#ea580c";
    strokeWidth: 2;
  }

  s3_raw[S3 Raw Zone] {
    backgroundColor: "#ea580c";
    strokeColor: "#c2410c";
    fontSize: 16;
    shape: cylinder;
    color: "#ffffff";
  }

  s3_processed[S3 Processed Zone] {
    backgroundColor: "#fed7aa";
    strokeColor: "#ea580c";
    fontSize: 14;
    shape: cylinder;
  }

  s3_curated[S3 Curated Zone] {
    backgroundColor: "#fed7aa";
    strokeColor: "#ea580c";
    fontSize: 14;
    shape: cylinder;
  }

  # Data lake zones flow
  s3_raw -> s3_processed: "Clean";
  s3_processed -> s3_curated: "Transform";
}

# Batch Processing
container "Batch Processing" as batch_processing {
  style: {
    backgroundColor: "#f3e8ff";
    strokeColor: "#7c3aed";
    strokeWidth: 2;
  }

  spark[Apache Spark] {
    backgroundColor: "#7c3aed";
    strokeColor: "#6b21a8";
    fontSize: 16;
    color: "#ffffff";
  }

  airflow[Apache Airflow] {
    backgroundColor: "#c4b5fd";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }

  dbt[dbt] {
    backgroundColor: "#c4b5fd";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }

  # Orchestration
  airflow -> spark: "Schedule";
  airflow -> dbt: "Transform";
}

# Data Warehouse
container "Data Warehouse" as data_warehouse {
  style: {
    backgroundColor: "#ede9fe";
    strokeColor: "#8b5cf6";
    strokeWidth: 2;
  }

  snowflake[Snowflake] {
    backgroundColor: "#8b5cf6";
    strokeColor: "#7c3aed";
    fontSize: 16;
    shape: cylinder;
    color: "#ffffff";
  }

  dimensional_models[Dimensional Models] {
    backgroundColor: "#ddd6fe";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }
}

# Machine Learning Platform
container "ML Platform" as ml_platform {
  style: {
    backgroundColor: "#ecfdf5";
    strokeColor: "#10b981";
    strokeWidth: 2;
  }

  mlflow[MLflow] {
    backgroundColor: "#10b981";
    strokeColor: "#047857";
    fontSize: 16;
    color: "#ffffff";
  }

  feature_store[Feature Store] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  model_registry[Model Registry] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  # ML workflow
  feature_store -> mlflow: "Features";
  mlflow -> model_registry: "Models";
}

# Analytics & BI
container "Analytics & BI" as analytics {
  style: {
    backgroundColor: "#fef2f2";
    strokeColor: "#dc2626";
    strokeWidth: 2;
  }

  tableau[Tableau] {
    backgroundColor: "#dc2626";
    strokeColor: "#b91c1c";
    fontSize: 16;
    color: "#ffffff";
  }

  looker[Looker] {
    backgroundColor: "#fca5a5";
    strokeColor: "#dc2626";
    fontSize: 14;
  }

  self_service[Self-Service Analytics] {
    backgroundColor: "#f87171";
    strokeColor: "#dc2626";
    fontSize: 14;
  }
}

# Data Governance
container "Data Governance" as governance {
  style: {
    backgroundColor: "#fefce8";
    strokeColor: "#ca8a04";
    strokeWidth: 2;
  }

  data_catalog[Data Catalog] {
    backgroundColor: "#ca8a04";
    strokeColor: "#a16207";
    fontSize: 16;
    color: "#ffffff";
  }

  data_lineage[Data Lineage] {
    backgroundColor: "#fde047";
    strokeColor: "#ca8a04";
    fontSize: 14;
  }

  data_quality[Data Quality] {
    backgroundColor: "#fde047";
    strokeColor: "#ca8a04";
    fontSize: 14;
  }
}

# === CONTAINER TO CONTAINER CONNECTIONS ===

# Data Flow Pipeline
data_sources -> data_ingestion: "Raw Data" {
  routing: orthogonal;
};

data_ingestion -> stream_processing: "Event Streams" {
  routing: orthogonal;
};

data_ingestion -> data_lake: "Raw Storage" {
  routing: orthogonal;
};

stream_processing -> data_lake: "Processed Events" {
  routing: orthogonal;
};

data_lake -> batch_processing: "Batch Jobs" {
  routing: orthogonal;
};

batch_processing -> data_warehouse: "Transformed Data" {
  routing: orthogonal;
};

data_warehouse -> analytics: "Business Data" {
  routing: orthogonal;
};

# ML Pipeline
data_lake -> ml_platform: "Training Data" {
  routing: orthogonal;
};

ml_platform -> stream_processing: "Deployed Models" {
  routing: orthogonal;
};

# Governance Integration
data_lake -> governance: "Metadata" {
  routing: orthogonal;
};

data_warehouse -> governance: "Lineage" {
  routing: orthogonal;
};

batch_processing -> governance: "Quality Metrics" {
  routing: orthogonal;
};
