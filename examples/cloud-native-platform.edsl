---
layout: elk
direction: TB
theme: light
node_spacing: 200
edge_spacing: 100
---

# Cloud-Native Platform - Simplified Architecture
# Shows essential container-to-container communication flows

# Client Layer
container "Client Applications" as clients {
  style: {
    backgroundColor: "#f0f9ff";
    strokeColor: "#0ea5e9";
    strokeWidth: 2;
  }

  web_client[Web Application] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
    fontSize: 16;
  }

  mobile_client[Mobile App] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
    fontSize: 16;
  }

  cli_client[CLI Tools] {
    backgroundColor: "#0ea5e9";
    strokeColor: "#0284c7";
    fontSize: 16;
  }
}

# Edge/CDN Layer
container "Edge & CDN" as edge {
  style: {
    backgroundColor: "#fef3c7";
    strokeColor: "#f59e0b";
    strokeWidth: 2;
  }

  cdn[CDN] {
    backgroundColor: "#fbbf24";
    strokeColor: "#f59e0b";
    fontSize: 16;
  }

  waf[Web Application Firewall] {
    backgroundColor: "#fbbf24";
    strokeColor: "#f59e0b";
    fontSize: 16;
  }
}

# Kubernetes Ingress
container "Kubernetes Ingress" as k8s_ingress {
  style: {
    backgroundColor: "#f0fdf4";
    strokeColor: "#16a34a";
    strokeWidth: 2;
  }

  ingress_controller[Ingress Controller] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
    fontSize: 14;
  }

  cert_manager[Cert Manager] {
    backgroundColor: "#86efac";
    strokeColor: "#22c55e";
    fontSize: 14;
  }
}

# Service Mesh
container "Service Mesh" as service_mesh {
  style: {
    backgroundColor: "#ede9fe";
    strokeColor: "#8b5cf6";
    strokeWidth: 2;
  }

  istio_gateway[Istio Gateway] {
    backgroundColor: "#c4b5fd";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }

  envoy_proxy[Envoy Proxy] {
    backgroundColor: "#c4b5fd";
    strokeColor: "#8b5cf6";
    fontSize: 14;
  }
}

# Application Services
container "Microservices Platform" as app_services {
  style: {
    backgroundColor: "#ecfdf5";
    strokeColor: "#10b981";
    strokeWidth: 2;
  }

  api_gateway[API Gateway] {
    backgroundColor: "#34d399";
    strokeColor: "#059669";
    fontSize: 16;
  }

  auth_service[Auth Service] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  user_service[User Service] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  order_service[Order Service] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  payment_service[Payment Service] {
    backgroundColor: "#6ee7b7";
    strokeColor: "#10b981";
    fontSize: 14;
  }

  # Internal connections only
  api_gateway -> auth_service: "AuthN/AuthZ" {
    routing: orthogonal;
  };
  api_gateway -> user_service: "User Ops" {
    routing: orthogonal;
  };
  api_gateway -> order_service: "Orders" {
    routing: orthogonal;
  };
  order_service -> payment_service: "Payment" {
    routing: orthogonal;
  };
}

# Data Layer
container "Data & Storage" as data_layer {
  style: {
    backgroundColor: "#fef3e2";
    strokeColor: "#ea580c";
    strokeWidth: 2;
  }

  postgres[PostgreSQL] {
    shape: cylinder;
    backgroundColor: "#fed7aa";
    strokeColor: "#ea580c";
    fontSize: 14;
  }

  redis[Redis Cache] {
    shape: ellipse;
    backgroundColor: "#fed7aa";
    strokeColor: "#ea580c";
    fontSize: 14;
  }
}

# Event Streaming
container "Event Streaming" as messaging {
  style: {
    backgroundColor: "#f3e8ff";
    strokeColor: "#7c3aed";
    strokeWidth: 2;
  }

  kafka[Apache Kafka] {
    backgroundColor: "#ddd6fe";
    strokeColor: "#7c3aed";
    fontSize: 16;
  }
}

# Observability
container "Observability" as observability {
  style: {
    backgroundColor: "#fef2f2";
    strokeColor: "#dc2626";
    strokeWidth: 2;
  }

  prometheus[Prometheus] {
    backgroundColor: "#fca5a5";
    strokeColor: "#dc2626";
    fontSize: 14;
  }

  grafana[Grafana] {
    backgroundColor: "#fca5a5";
    strokeColor: "#dc2626";
    fontSize: 14;
  }

  # Internal observability connections
  prometheus -> grafana: "Metrics" {
    routing: orthogonal;
  };
}

# GitOps Pipeline
container "GitOps" as gitops {
  style: {
    backgroundColor: "#f0f9ff";
    strokeColor: "#2563eb";
    strokeWidth: 2;
  }

  argocd[ArgoCD] {
    backgroundColor: "#93c5fd";
    strokeColor: "#2563eb";
    fontSize: 14;
  }

  git_repo[Git Repository] {
    backgroundColor: "#93c5fd";
    strokeColor: "#2563eb";
    fontSize: 14;
  }

  # Internal GitOps flow
  git_repo -> argocd: "Config Sync" {
    routing: orthogonal;
  };
}

# External Services
container "External Services" as external {
  style: {
    backgroundColor: "#f8fafc";
    strokeColor: "#64748b";
    strokeWidth: 2;
    strokeStyle: dashed;
  }

  stripe[Stripe API] {
    backgroundColor: "#e2e8f0";
    strokeColor: "#64748b";
    fontSize: 14;
  }
}

# === CONTAINER TO CONTAINER CONNECTIONS ===

# Client Layer → Edge
clients -> edge: "HTTPS Traffic" {
  routing: orthogonal;
};

# Edge → Kubernetes
edge -> k8s_ingress: "Filtered Traffic" {
  routing: orthogonal;
};

# Kubernetes → Service Mesh
k8s_ingress -> service_mesh: "TLS Termination" {
  routing: orthogonal;
};

# Service Mesh → Applications
service_mesh -> app_services: "Traffic Routing" {
  routing: orthogonal;
};

# Applications → Data
app_services -> data_layer: "Data Access" {
  routing: orthogonal;
};

# Applications → Messaging
app_services -> messaging: "Event Publishing" {
  routing: orthogonal;
};

# Applications → Observability (single connection for all metrics/logs)
app_services -> observability: "Metrics & Logs" {
  routing: orthogonal;
};

# Applications → External Services
app_services -> external: "API Calls" {
  routing: orthogonal;
};

# GitOps → Infrastructure (deployment)
gitops -> k8s_ingress: "Deploy Infrastructure" {
  routing: orthogonal;
};

gitops -> app_services: "Deploy Applications" {
  routing: orthogonal;
};

gitops -> observability: "Deploy Monitoring" {
  routing: orthogonal;
};
