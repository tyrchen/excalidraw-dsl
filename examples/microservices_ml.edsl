# Microservices Architecture with ML Layout
# This example demonstrates how ML layout can optimize complex microservice architectures

diagram microservices_architecture {
    # API Gateway and Load Balancers
    user [label="User"];
    lb [label="Load Balancer"];
    api_gateway [label="API Gateway"];

    # Authentication & Authorization
    auth_service [label="Auth Service"];
    user_service [label="User Service"];
    session_store [label="Session Store"];

    # Core Business Services
    order_service [label="Order Service"];
    payment_service [label="Payment Service"];
    inventory_service [label="Inventory Service"];
    shipping_service [label="Shipping Service"];
    notification_service [label="Notification Service"];

    # Data Processing Services
    analytics_service [label="Analytics Service"];
    recommendation_service [label="Recommendation Service"];
    search_service [label="Search Service"];

    # Databases
    user_db [label="User Database"];
    order_db [label="Order Database"];
    payment_db [label="Payment Database"];
    inventory_db [label="Inventory Database"];
    analytics_db [label="Analytics Database"];

    # Message Queue and Cache
    message_queue [label="Message Queue"];
    redis_cache [label="Redis Cache"];

    # External Services
    payment_gateway [label="Payment Gateway"];
    shipping_api [label="Shipping API"];
    email_service [label="Email Service"];

    # Infrastructure
    monitoring [label="Monitoring"];
    logging [label="Logging"];
    config_service [label="Config Service"];

    # User flow
    user -> lb -> api_gateway;

    # Authentication flow
    api_gateway -> auth_service;
    auth_service -> user_service;
    auth_service -> session_store;
    user_service -> user_db;

    # Business logic flows
    api_gateway -> order_service, payment_service, inventory_service, search_service;

    # Order processing flow
    order_service -> order_db;
    order_service -> payment_service;
    order_service -> inventory_service;
    order_service -> shipping_service;
    order_service -> notification_service;

    # Payment processing
    payment_service -> payment_db;
    payment_service -> payment_gateway;

    # Inventory management
    inventory_service -> inventory_db;

    # Shipping integration
    shipping_service -> shipping_api;

    # Notification system
    notification_service -> email_service;
    notification_service -> message_queue;

    # Analytics and recommendations
    analytics_service -> analytics_db;
    analytics_service <- order_service, payment_service, inventory_service;
    recommendation_service -> analytics_service;
    recommendation_service -> redis_cache;

    # Search functionality
    search_service -> redis_cache;
    search_service -> inventory_service;

    # Cross-cutting concerns
    monitoring <- order_service, payment_service, inventory_service, auth_service;
    logging <- api_gateway, order_service, payment_service, inventory_service;
    config_service -> auth_service, order_service, payment_service, inventory_service;

    # Message queue integrations
    message_queue <- order_service, payment_service;
    message_queue -> notification_service, analytics_service;
}
