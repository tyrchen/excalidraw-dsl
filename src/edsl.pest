// edsl.pest - Complete grammar specification for ExcaliDraw-DSL
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

file = { SOI ~ config? ~ statement* ~ EOI }

// YAML frontmatter configuration
config = { "---" ~ yaml_content ~ "---" }
yaml_content = { (!"---" ~ ANY)* }

// Main statements
statement = {
    (template_def |
     diagram_def |
     connection_def |
     connections_def |
     component_type_def |
     container_def |
     group_def |
     edge_def |
     node_def
    ) ~ ";"?
}

// Component type definitions
component_type_def = {
  "componentType" ~ id ~ "{" ~
  component_type_style ~
  "}"
}
component_type_style = {
  ("shape" ~ ":" ~ shape_type ~ ";")? ~
  ("style" ~ style_block)?
}
shape_type = { "rectangle" | "ellipse" | "diamond" | "cylinder" }

// Node definitions
node_def = { !("connection" | "connections" | "componentType" | "container" | "group") ~ id ~ label? ~ type_ref? ~ style_block? }
type_ref = { "{" ~ "type" ~ ":" ~ id ~ "}" }
label = { "[" ~ label_text ~ "]" }
label_text = @{ (!"[" ~ !"]" ~ !"\"" ~ !NEWLINE ~ ANY)+ }

// Edge definitions
edge_def = { edge_chain | single_edge }
edge_chain = { node_ref ~ (arrow ~ node_ref)+ ~ edge_label? ~ style_block? }
single_edge = { node_ref ~ arrow ~ node_ref ~ edge_label? ~ style_block? }
node_ref = { !("connection" | "connections" | "componentType" | "container" | "group") ~ id ~ label? }
edge_label = { (":" ~ " "? ~ edge_label_content) | ("{" ~ edge_label_content ~ "}") }
edge_label_content = @{ string_literal | (!NEWLINE ~ !";" ~ !"{" ~ !"}" ~ ANY)+ }
arrow = { "->" | "--" | "<->" | "~>" }

// Connection definitions (advanced syntax)
connection_def = {
  "connection" ~ "{" ~
  "from" ~ ":" ~ string_literal ~ ";" ~
  "to" ~ ":" ~ string_literal ~ ";" ~
  connection_style ~
  "}"
}

connections_def = {
  "connections" ~ "{" ~
  "from" ~ ":" ~ string_literal ~ ";" ~
  "to" ~ ":" ~ "[" ~ connection_targets ~ "]" ~ ";" ~
  connection_style ~
  "}"
}

connection_targets = { string_literal ~ ("," ~ string_literal)* }

connection_style = {
  "style" ~ "{" ~
  connection_style_attr* ~
  "}"
}

connection_style_attr = {
  ("type" ~ ":" ~ edge_type ~ ";") |
  ("label" ~ ":" ~ string_literal ~ ";") |
  ("labelPosition" ~ ":" ~ number ~ ";") |
  ("routing" ~ ":" ~ routing_type ~ ";") |
  ("color" ~ ":" ~ string_literal ~ ";") |
  ("width" ~ ":" ~ number ~ ";") |
  ("strokeStyle" ~ ":" ~ stroke_style ~ ";")
}

edge_type = { "arrow" | "line" | "dashed" | "dotted" }
routing_type = { "straight" | "orthogonal" | "curved" | "auto" }
stroke_style = { "solid" | "dashed" | "dotted" }

// Container definitions
container_def = {
  "container" ~ string_literal? ~ ("as" ~ id)? ~ "{" ~
  container_style? ~
  statement* ~
  "}"
}
container_style = { "style:" ~ style_block }

// Group definitions
group_def = {
  group_type ~ string_literal ~ ("as" ~ id)? ~ "{" ~
  group_style? ~
  statement* ~
  "}"
}
group_type = { "group" | "flow" | semantic_group_type }
semantic_group_type = { "service" | "layer" | "component" | "subsystem" | "zone" | "cluster" }
group_style = { "style:" ~ style_block }

// Template definitions
template_def = {
  "template" ~ identifier ~ "{" ~
  template_body ~
  "}"
}
template_body = {
  (layers_def | connections_pattern | layout_def)*
}
layers_def = {
  "layers" ~ "{" ~ layer_def* ~ "}"
}
layer_def = {
  string_literal ~ "{" ~ layer_body ~ "}"
}
layer_body = {
  (components_list | layer_layout)*
}
components_list = {
  "components:" ~ "[" ~ (string_literal ~ ("," ~ string_literal)*)? ~ "]"
}
layer_layout = {
  "layout:" ~ (layout_type | layer_layout_type)
}
layer_layout_type = { "horizontal" | "vertical" | ("grid(" ~ number ~ ")") }

connections_pattern = {
  "connections" ~ "{" ~
  "pattern:" ~ connection_pattern_type ~
  "}"
}
connection_pattern_type = {
  "each-to-next-layer" |
  "mesh" |
  ("star(" ~ string_literal ~ ")") |
  "custom"
}

// Diagram definitions
diagram_def = {
  "diagram" ~ string_literal ~ "{" ~
  diagram_body ~
  "}"
}
diagram_body = {
  (diagram_type | layout_def | template_ref)*
}
diagram_type = {
  "type:" ~ diagram_type_name
}
diagram_type_name = {
  "architecture" | "flow" | "sequence" | "network" | "database" | identifier
}
template_ref = {
  "template:" ~ identifier
}

// Layout definitions
layout_def = {
  "layout" ~ "{" ~
  (layout_type_def | layout_direction_def | layout_spacing_def)* ~
  "}"
}
layout_type_def = { "type:" ~ layout_type }
layout_type = { "layered" | "force" | "grid" | "tree" | "manual" }
layout_direction_def = { "direction:" ~ layout_direction }
layout_direction = {
  "horizontal" | "vertical" |
  "top-to-bottom" | "bottom-to-top" |
  "left-to-right" | "right-to-left"
}
layout_spacing_def = { "spacing:" ~ "{" ~ spacing_params ~ "}" }
spacing_params = {
  (spacing_x | spacing_y | node_spacing | layer_spacing)*
}
spacing_x = { "x:" ~ number }
spacing_y = { "y:" ~ number }
node_spacing = { "node_spacing:" ~ number }
layer_spacing = { "layer_spacing:" ~ number }

// Style blocks
style_block = { "{" ~ attribute* ~ "}" }
attribute = { property_name ~ ":" ~ property_value ~ ";" }
property_name = @{ (ASCII_ALPHANUMERIC | "_")+ }
property_value = { string_literal | number | color | boolean | identifier }
identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }

// Primitives
id = @{ (ASCII_ALPHANUMERIC | "_" | ".")+ }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
color = @{ "#" ~ ASCII_HEX_DIGIT{6} }
boolean = { "true" | "false" }
